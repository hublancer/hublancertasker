rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      
      match /transactions/{transactionId} {
        allow read, write: if isOwner(userId);
      }
      
      match /notifications/{notificationId} {
      	allow read, write: if isOwner(userId);
      }
    }

    match /tasks/{taskId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.postedById == request.auth.uid;
      allow update: if request.auth != null && (
                      (get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById == request.auth.uid) || // owner
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['offerCount'])) || // anyone can update offerCount
                      (get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToId == request.auth.uid && request.resource.data.status == 'pending-completion') // tasker can mark as done
                    );
      allow delete: if get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById == request.auth.uid || isAdmin();

      match /offers/{offerId} {
        allow read;
        allow create, update: if request.auth != null && request.resource.data.taskerId == request.auth.uid;
        allow delete: if get(/databases/$(database)/documents/tasks/$(taskId)/offers/$(offerId)).data.taskerId == request.auth.uid || get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById == request.auth.uid;
      }

      match /questions/{questionId} {
        allow read;
        allow create: if request.auth != null;
        allow update: if get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById == request.auth.uid; // owner can add answer
      }
    }
    
    match /conversations/{conversationId} {
        allow read, create: if request.auth.uid in resource.data.participants;
        allow update: if request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      }
    }
    
    match /reviews/{reviewId} {
      allow read, create: if request.auth.uid == request.resource.data.clientId;
    }
    
    match /settings/{settingId} {
        allow read;
        allow write: if isAdmin();
    }
    
    match /platform_transactions/{transactionId} {
        allow read: if isAdmin();
    }
  }
}
