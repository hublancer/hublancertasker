rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Users can only read their own profile, but can be updated by admins
    // or through specific allowed transactions.
    match /users/{userId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if request.auth.uid == userId || isAdmin();
      
      // Users can only access their own subcollections
      match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /transactions/{transactionId} {
         allow read, write: if request.auth.uid == userId || isAdmin();
      }
    }
    
    // Tasks can be read by anyone, but only created/updated by authenticated users.
    match /tasks/{taskId} {
      allow read;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && (resource.data.postedById == request.auth.uid || isAdmin());
      
      // Subcollections can be read by anyone, but written to only by authenticated users.
      match /{subcollection}/{docId} {
        allow read;
        allow write: if isSignedIn();
      }
    }
    
    // Admins can manage settings, anyone can read them.
    match /settings/platform {
        allow read;
        allow write: if isAdmin();
    }
    
    // Admins can manage gateways, authenticated users can read them.
    match /paymentGateways/{gatewayId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // Users can create their own deposit/withdrawal requests.
    // Admins can read/write all requests.
    // Users can read their own requests.
    match /deposits/{depositId} {
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow read: if isAdmin() || resource.data.userId == request.auth.uid;
        allow update, delete: if isAdmin();
    }

    match /withdrawals/{withdrawalId} {
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow read: if isAdmin() || resource.data.userId == request.auth.uid;
        allow update, delete: if isAdmin();
    }
    
    // Reviews can be read by anyone, but only created by authenticated users.
    match /reviews/{reviewId} {
        allow read;
        allow create: if isSignedIn();
    }
    
    // Conversations are private between participants.
    match /conversations/{conversationId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
          allow read, write: if isSignedIn() && get(parent(parent)).data.participants.hasAny([request.auth.uid]);
      }
    }

    // Admins can read all platform transactions.
    match /platform_transactions/{transactionId} {
        allow read, write: if isAdmin();
    }
  }
}
