rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
        return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // TASKS
    match /tasks/{taskId} {
      // ANYONE can read a task
      allow read: if true;

      // Authenticated users can create tasks
      allow create: if isAuth();

      // The owner can cancel (delete) an open task
      allow delete: if isAuth() && resource.data.postedById == request.auth.uid && resource.data.status == 'open';

      // Updates are more complex, handle by case
      allow update: if 
        // Case 1: The assigned tasker is marking the task as done
        (isAuth() && request.auth.uid == resource.data.assignedToId && request.resource.data.status == 'pending-completion') ||
        // Case 2: The owner is completing the task
        (isAuth() && request.auth.uid == resource.data.postedById && request.resource.data.status == 'completed') ||
        // Case 3: The owner is assigning the task
        (isAuth() && request.auth.uid == resource.data.postedById && request.resource.data.status == 'assigned');

      // OFFERS on a task
      match /offers/{offerId} {
        // ANYONE can read offers
        allow read: if true;
        
        // Authenticated users can create offers
        allow create: if isAuth();

        // Only the offer creator can edit or delete their offer
        allow update, delete: if isAuth() && resource.data.taskerId == request.auth.uid;
      }
      
       // QUESTIONS on a task
      match /questions/{questionId} {
        // ANYONE can read questions
        allow read: if true;

        // Authenticated users can create questions
        allow create: if isAuth();
        
        // The task owner can answer a question (update)
        allow update: if isAuth() && get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById == request.auth.uid;
      }
    }
    
    // REVIEWS
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      // Only the client who created the task can create a review
      allow create: if isAuth() && request.resource.data.clientId == request.auth.uid;
    }

    // USERS
    match /users/{userId} {
      // Allow users to create their own account document
      allow create: if isOwner(userId);

      // Anyone can read public profile info
      allow read: if true;

      // A user can only update their own profile
      allow update: if isOwner(userId);
      
      // Allow admins to update any user profile (e.g., wallet adjustments)
      allow update: if isAdmin();

      // Secure transactions, notifications, and other private subcollections
      match /transactions/{transactionId} {
        allow read, list, create: if isOwner(userId);
      }
      match /notifications/{notificationId} {
        allow read, list, create, update: if isOwner(userId);
      }
    }
    
    // CONVERSATIONS
    match /conversations/{conversationId} {
        // Only participants can read/write to a conversation
        allow read, update, delete: if isAuth() && request.auth.uid in resource.data.participants;
        allow create: if isAuth();
        
        match /messages/{messageId} {
             allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
    }
    
    // SETTINGS
    match /settings/platform {
        // Anyone can read settings, but only admins can write
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // PLATFORM TRANSACTIONS (for admin)
    match /platform_transactions/{transactionId} {
        allow read, list: if isAdmin();
        // Disallow client-side creation
        allow create, update, delete: if false;
    }
  }
}