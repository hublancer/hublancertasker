rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Settings: Admins can write, anyone can read
    match /settings/platform {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Users: Can only access their own data, but can read public profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      
      // Deny access to private subcollections
      match /transactions/{transactionId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Tasks: Publicly readable, but writes are restricted
    match /tasks/{taskId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.postedById;
      allow update: if request.auth.uid == request.resource.data.postedById 
                    || request.auth.uid == request.resource.data.assignedToId;
      allow delete: if request.auth.uid == resource.data.postedById;

      // Offers: Authenticated users can create, only creator can delete
      match /offers/{offerId} {
        allow read: if true;
        allow create: if request.auth.uid != get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById;
        allow update, delete: if request.auth.uid == resource.data.taskerId;
      }

      // Questions: Authenticated users can create/answer
       match /questions/{questionId} {
        allow read: if true;
        allow create: if request.auth.uid != null;
        allow update: if request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById;
       }
    }
    
    // Reviews: only readable
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.clientId;
    }

    // Conversations: Only participants can access
    match /conversations/{conversationId} {
      allow read, write: if request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
          allow read, write: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // Platform Transactions: Admin-only
    match /platform_transactions/{transactionId} {
        allow read, write: if isAdmin();
    }

    // Payment Gateways: Readable by users, writable by admins
    match /paymentGateways/{gatewayId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Deposits: Users can create, Admins can manage
    match /deposits/{depositId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, update: if isAdmin();
    }

    // Withdrawals: Users can create, Admins can manage
    match /withdrawals/{withdrawalId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, update: if isAdmin();
    }
  }
}
