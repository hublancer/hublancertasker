rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Note: This requires the client to be authenticated.
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Settings can be read by anyone, but only written to by an admin.
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // User profile data
    match /users/{userId} {
      // Anyone can view a user's public profile.
      allow read: if true;

      // A user can update their own profile.
      allow update: if isOwner(userId);

      // A user can only be created if the UID matches the authenticated user.
      allow create: if isOwner(userId);
      
      // Users can only access their own private subcollections.
      match /transactions/{transactionId} {
        allow read, write: if isOwner(userId);
      }
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Task documents
    match /tasks/{taskId} {
      // Anyone can read a task.
      allow read: if true;
      // Any authenticated user can create a task.
      allow create: if isAuth();

      // Deletion is restricted to the task owner.
      allow delete: if isAuth() && isOwner(resource.data.postedById);

      // Update rules are conditional based on status and user role.
      allow update: if isAuth() &&
        (
          // The client can update the task to mark it as 'completed'.
          (isOwner(resource.data.postedById) && request.resource.data.status == 'completed') ||
          // The assigned tasker can update the task to 'pending-completion'.
          (isOwner(resource.data.assignedToId) && request.resource.data.status == 'pending-completion')
        );

      // Offers can be created by any authenticated user.
      match /offers/{offerId} {
        allow read: if true;
        allow create: if isAuth();
        // Only the user who made the offer can update or delete it.
        allow update, delete: if isAuth() && isOwner(resource.data.taskerId);
      }

      // Questions can be created by any authenticated user.
      match /questions/{questionId} {
        allow read: if true;
        allow create: if isAuth();
      }
    }

    // Conversations are private between participants.
    match /conversations/{conversationId} {
      allow read, create, update: if isAuth() && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
         // Messages can be read and created by participants of the conversation.
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // Reviews can be read by anyone, but only created by an authenticated user.
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuth();
    }

    // Platform transactions are read-only for admins. No client writes allowed.
    match /platform_transactions/{transactionId} {
        allow read: if isAdmin();
        allow write: if false; 
    }
  }
}