rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own user document
      allow create: if isAuthenticated();
      
      // A user can only read or update their own document
      allow read, update: if isOwner(userId);

      // Rules for user's subcollections
      match /{allPaths=**} {
        allow read, write: if isOwner(userId);
      }
    }

    // Rules for the 'tasks' collection
    match /tasks/{taskId} {
      // Any authenticated user can create a task
      allow create: if isAuthenticated();
      
      // Any authenticated user can read a task
      allow read: if isAuthenticated();

      // Only the owner can delete their task
      allow delete: if isOwner(resource.data.postedById);

      // A user can update a task if they are the owner, OR
      // if they are only incrementing the offerCount by 1 as part of making an offer.
      allow update: if (isOwner(resource.data.postedById)) || 
                      (isAuthenticated() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['offerCount']) &&
                       request.resource.data.offerCount == resource.data.offerCount + 1);

      // Rules for the 'offers' subcollection within a task
      match /offers/{offerId} {
        // Any authenticated user can create an offer
        allow create: if isAuthenticated();
        
        // Only the offer creator can update or delete their offer
        allow update, delete: if isOwner(resource.data.taskerId);
        
        // Anyone can read offers
        allow read: if isAuthenticated();
      }

      // Rules for the 'questions' subcollection
      match /questions/{questionId} {
        allow create, read: if isAuthenticated();
      }
    }

    // Rules for the 'reviews' collection
    match /reviews/{reviewId} {
        allow create, read: if isAuthenticated();
    }
    
    // Rules for settings
    match /settings/platform {
        allow read: if true;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for platform transactions
    match /platform_transactions/{transactionId} {
        allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for conversations
    match /conversations/{conversationId} {
        allow read, update: if request.auth.uid in resource.data.participants;
        allow create: if isAuthenticated();
    }

    // Rules for messages within a conversation
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, create: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
    }
  }
}
