
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Deny all reads and writes by default
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow reading settings for all users
    match /settings/platform {
      allow read: if true;
      allow write: if isAdmin(); // Only admins can change settings
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if isSignedIn();
      // A user can create their own profile document
      allow create: if request.auth.uid == userId;
      // A user can only update their own profile, but cannot change their role or wallet
      allow update: if request.auth.uid == userId
                    && request.resource.data.role == resource.data.role
                    && request.resource.data.wallet.balance == resource.data.wallet.balance;
                    
      // Rules for user subcollections
      match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /transactions/{transactionId} {
        allow read: if request.auth.uid == userId;
        allow write: if false; // Only server can write transactions
      }
    }
    
    // Rules for the 'tasks' collection
    match /tasks/{taskId} {
      // Anyone can read tasks
      allow read: if true;
      // Authenticated users can create tasks
      allow create: if isSignedIn() && request.resource.data.postedById == request.auth.uid;
      // Only the owner can update a task if it's open. Admins can always update.
      allow update: if isSignedIn() && (
                      (resource.data.postedById == request.auth.uid && resource.data.status == 'open') 
                      || isAdmin()
                    );
      // Only the owner can delete a task if it's open. Admins can always delete.
      allow delete: if isSignedIn() && (
                      (resource.data.postedById == request.auth.uid && resource.data.status == 'open') 
                      || isAdmin()
                    );
                    
      // Rules for task subcollections
      match /offers/{offerId} {
        allow read: if true;
        // Authenticated users can create offers
        allow create: if isSignedIn() && request.resource.data.taskerId == request.auth.uid;
        // Only the offer owner can update/delete their offer
        allow update, delete: if isSignedIn() && resource.data.taskerId == request.auth.uid;
      }
      match /questions/{questionId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById == request.auth.uid);
      }
    }
    
    // Rules for conversations
    match /conversations/{conversationId} {
       allow read, update: if isSignedIn() && request.auth.uid in resource.data.participants;
       allow create: if isSignedIn();
       
       match /messages/{messageId} {
         allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
       }
    }

    // Rules for reviews
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
    }
    
    // Rules for payment gateways
    match /paymentGateways/{gatewayId} {
        allow read: if isSignedIn();
        allow write: if isAdmin(); // Only admins can manage gateways
    }
    
    // Rules for deposit/withdrawal requests
    match /deposits/{depositId} {
        allow read: if isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin());
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isAdmin();
    }
    
    match /withdrawals/{withdrawalId} {
        allow read: if isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin());
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isAdmin();
    }
    
    // Rules for platform transactions (read-only for admins)
    match /platform_transactions/{transactionId} {
      allow read: if isAdmin();
      allow write: if false; // Server only
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
