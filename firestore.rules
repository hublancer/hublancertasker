rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow update: if request.auth.uid == userId || isAdmin();
      allow create, delete: if isAdmin();

      // Rules for user's private subcollections
      match /transactions/{transactionId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Rules for the 'tasks' collection
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if resource.data.postedById == request.auth.uid && resource.data.status == 'open';
      
      // Update rules for tasks
      allow update: if 
        // Allow owner to cancel their own task
        (resource.data.postedById == request.auth.uid && resource.data.status == 'open') ||
        // Allow client to accept an offer (status -> assigned)
        (resource.data.postedById == request.auth.uid && request.resource.data.status == 'assigned' && resource.data.status == 'open') ||
        // Allow assigned tasker to mark as 'pending-completion'
        (request.auth.uid == resource.data.assignedToId && request.resource.data.status == 'pending-completion' && request.resource.data.keys().hasAll(['status', 'completionDetails'])) ||
        // Allow client to mark as 'completed'
        (request.auth.uid == resource.data.postedById && request.resource.data.status == 'completed' && (resource.data.status == 'pending-completion' || resource.data.status == 'assigned')) ||
        // Allow offerCount to be updated by our Cloud Function (or anyone, since it's controlled by the function)
        (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['offerCount']));


      // Rules for 'offers' subcollection
      match /offers/{offerId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountType == 'tasker';
        allow update, delete: if isAuthenticated() && resource.data.taskerId == request.auth.uid;
      }

      // Rules for 'questions' subcollection
      match /questions/{questionId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById == request.auth.uid;
      }
    }
    
    // Rules for the 'reviews' collection
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
                      request.resource.data.clientId == request.auth.uid &&
                      get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.status == 'completed';
    }

    // Rules for 'conversations' collection
    match /conversations/{conversationId} {
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participants;
        
        match /messages/{messageId} {
            allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
    }

    // Rules for 'settings' collection
    match /settings/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Rules for 'platform_transactions'
    match /platform_transactions/{transactionId} {
        allow read, write: if isAdmin();
    }
  }
}
