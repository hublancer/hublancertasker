
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    // Settings: Admins can manage, anyone can read
    match /settings/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Platform Transactions: Only readable by admins
    match /platform_transactions/{transactionId} {
        allow read, write: if isAdmin();
    }

    // Payment Gateways: Admins can manage, authenticated users can read
    match /paymentGateways/{gatewayId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Deposits: Users can create their own, Admins can manage all
    match /deposits/{depositId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if isAdmin();
    }

    // Withdrawals: Users can create their own, Admins can manage all
    match /withdrawals/{withdrawalId} {
       allow create: if request.auth.uid == request.resource.data.userId;
       allow read, update, delete: if isAdmin();
    }

    // Users: Can read public profiles, can only write to their own document
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId || isAdmin();
      
      // Transactions: Only owner can read/write their own transactions
      match /transactions/{transactionId} {
        allow read, write: if request.auth.uid == userId || isAdmin();
      }
      
      // Notifications: Only owner can read/write their own notifications
       match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == userId || isAdmin();
      }
    }

    // Tasks: Publicly readable, but writes are restricted
    match /tasks/{taskId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.postedById;
      allow update: if request.auth.uid == resource.data.postedById 
                      || request.auth.uid == resource.data.assignedToId
                      || isAdmin();
      allow delete: if request.auth.uid == resource.data.postedById || isAdmin();
      
      // Offers: Authenticated users can create, only owner can delete
      match /offers/{offerId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth.uid == resource.data.taskerId || isAdmin();
      }
      
      // Questions: Authenticated users can create
       match /questions/{questionId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById || isAdmin();
      }
    }
    
    // Conversations: Only participants can access
    match /conversations/{conversationId} {
        allow read, write: if request.auth.uid in resource.data.participants || isAdmin();

        match /messages/{messageId} {
            allow read, write: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants || isAdmin();
        }
    }

    // Reviews: Only authenticated can create
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
    }
  }
}
