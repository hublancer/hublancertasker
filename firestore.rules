rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }

    // Settings
    match /settings/platform {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Platform Transactions (Admin only)
    match /platform_transactions/{transactionId} {
       allow read, write: if isAdmin();
    }
    
    // Reviews
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated(); // Further validation in transaction
    }

    // Users
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId; // Allow user creation on signup
      allow update: if isOwner(userId);
      
      // Transactions subcollection
      match /transactions/{transactionId} {
        allow read, list: if isOwner(userId);
        allow create: if isOwner(userId) || isAdmin(); // Allow user deposits or admin adjustments
      }
      
      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, list: if isOwner(userId);
        allow create: if isAuthenticated(); // System can create notifications
        allow update: if isOwner(userId); // User can mark as read
      }
    }

    // Tasks
    match /tasks/{taskId} {
      allow read: if true;
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        // Case 1: Client cancels their own 'open' task
        (resource.data.status == 'open' && request.resource.data.status == 'cancelled' && isOwner(resource.data.postedById)) ||
        // Case 2: Client assigns a tasker
        (resource.data.status == 'open' && request.resource.data.status == 'assigned' && isOwner(resource.data.postedById)) ||
        // Case 3: Tasker marks task as pending completion
        (resource.data.status == 'assigned' && request.resource.data.status == 'pending-completion' && isOwner(resource.data.assignedToId)) ||
        // Case 4: Client marks task as complete
        ((resource.data.status == 'assigned' || resource.data.status == 'pending-completion') && request.resource.data.status == 'completed' && isOwner(resource.data.postedById))
      );
      
      allow delete: if isOwner(resource.data.postedById);

      // Offers subcollection
      match /offers/{offerId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isOwner(request.auth.uid);
      }
      
      // Questions subcollection
      match /questions/{questionId} {
        allow read: if true;
        allow create: if isAuthenticated();
        // Allow owner of task to answer
        allow update: if isOwner(resource.data.postedById);
      }
    }
    
    // Conversations
    match /conversations/{conversationId} {
      allow read, list: if request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated();
      allow update: if request.auth.uid in resource.data.participants;

      // Messages subcollection
      match /messages/{messageId} {
        allow read, list: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        // Prevent messaging if task is completed
        allow create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants
                      && get(/databases/$(database)/documents/tasks/$(get(/databases/$(database)/documents/conversations/$(conversationId)).data.taskId)).data.status != 'completed';
      }
    }
  }
}
