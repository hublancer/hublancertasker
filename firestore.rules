rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // By default, deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow admins to read/write settings
    match /settings/platform {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Allow admins to read platform transactions. Writes are handled by functions.
    match /platform_transactions/{transactionId} {
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if false;
    }

    // User profiles can be read by anyone, but only edited by the owner or an admin.
    match /users/{userId} {
      allow read: if true;
      allow update: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth.uid == userId;

      // Transactions and notifications are private to the user.
      match /transactions/{transactionId} {
        allow read, list: if request.auth.uid == userId;
      }
      match /notifications/{notificationId} {
        allow read, list, update: if request.auth.uid == userId;
      }
    }
    
    // Reviews can be read by anyone. Only the client who posted it can create it.
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.clientId;
    }

    // Tasks can be read by anyone.
    match /tasks/{taskId} {
      allow read: if true;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid != null; // Further logic is handled client-side or by functions
      allow delete: if request.resource.data.postedById == request.auth.uid; // Owner can delete

      // Offers can be created by any authenticated user.
      match /offers/{offerId} {
        allow read: if true;
        allow create: if request.auth.uid != null;
        allow update, delete: if get(/databases/$(database)/documents/tasks/$(taskId)/offers/$(offerId)).data.taskerId == request.auth.uid;
      }

      // Questions can be created by any authenticated user.
      match /questions/{questionId} {
        allow read: if true;
        allow create: if request.auth.uid != null;
        allow update: if get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById == request.auth.uid; // Only task owner can reply
      }
    }
    
    // Conversations can only be accessed by participants.
    match /conversations/{conversationId} {
      allow read, list, create: if request.auth.uid in resource.data.participants;
      allow update: if request.auth.uid in resource.data.participants;
      
      // Messages can only be accessed by participants.
      match /messages/{messageId} {
        allow read, list, create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
  }
}
