
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS:
    // Allow anyone to read user profiles (for profile pages)
    // Allow users to create their own profile on signup
    // Allow users to update their own profile, but not their role or wallet
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId
                    && !(request.resource.data.keys().hasAny(['role', 'wallet']));
    }
    
    // User subcollections (transactions, notifications) are private
    match /users/{userId}/{collection}/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // TASKS:
    // Allow anyone to read tasks
    // Allow authenticated users to create tasks
    // Allow the owner to update their own task if it is 'open'
    // Allow an admin to update any task
    match /tasks/{taskId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                      ( (resource.data.postedById == request.auth.uid && resource.data.status == 'open') || isAdmin() );
      allow delete: if request.auth != null && (resource.data.postedById == request.auth.uid || isAdmin());
    }
    
    // TASK Subcollections (offers, questions):
    // Allow authenticated users to create offers/questions
    // Allow offer/question owner to delete their own offer/question
    match /tasks/{taskId}/{collection}/{docId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && (resource.data.taskerId == request.auth.uid || resource.data.userId == request.auth.uid || isAdmin());
      allow update: if request.auth != null && (resource.data.taskerId == request.auth.uid || resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // REVIEWS:
    // Allow anyone to read reviews
    // Allow authenticated users to create reviews
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth != null;
    }

    // SETTINGS:
    // Allow anyone to read settings
    // Only admins can write settings
    match /settings/platform {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // CONVERSATIONS:
    // Allow participants to read/write to their conversations
    match /conversations/{convoId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null; // On task assignment
    }
    match /conversations/{convoId}/messages/{messageId} {
       allow read, create: if request.auth != null && get(/databases/$(database)/documents/conversations/$(convoId)).data.participants.hasAny([request.auth.uid]);
    }
    
    // PAYMENT & ADMIN COLLECTIONS
    // Allow admin to read/write all of these
    // For deposits/withdrawals, allow the user to create their own request
    match /deposits/{depositId} {
        allow read, update: if isAdmin();
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /withdrawals/{withdrawalId} {
        allow read, update: if isAdmin();
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /paymentGateways/{gatewayId} {
        allow read, write: if isAdmin();
    }
    
    match /platform_transactions/{transactionId} {
        allow read, write: if isAdmin();
    }
  }
}
