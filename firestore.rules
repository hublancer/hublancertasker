rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(docData) {
      return request.auth.uid == docData.postedById;
    }
    
    // Helper function to check if a user is the assigned tasker
    function isAssignedTasker(docData) {
        return request.auth.uid == docData.assignedToId;
    }

    // SETTINGS
    match /settings/{settingId} {
        // Only admins can read or write platform settings
        allow read, write: if isAdmin();
    }

    // TASKS
    match /tasks/{taskId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;

      // Complex update logic for tasks
      allow update: if 
        // Case 1: Owner can update an open task (e.g. edit details, not implemented yet but good to have)
        (isOwner(resource.data) && resource.data.status == 'open') ||
        // Case 2: Owner can accept an offer, changing status to 'assigned'
        (isOwner(resource.data) && request.resource.data.status == 'assigned' && resource.data.status == 'open') ||
        // Case 3: Owner can complete a task that is 'pending-completion'
        (isOwner(resource.data) && request.resource.data.status == 'completed' && resource.data.status == 'pending-completion') ||
        // Case 4: Assigned tasker can mark a task as 'pending-completion'
        (isAssignedTasker(resource.data) && request.resource.data.status == 'pending-completion' && resource.data.status == 'assigned');
        
      allow delete: if isOwner(resource.data) && resource.data.status == 'open';

      // OFFERS subcollection
      match /offers/{offerId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if request.auth.uid == resource.data.taskerId;
      }
      
      // QUESTIONS subcollection
      match /questions/{questionId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
      }
    }
    
    // USERS
    match /users/{userId} {
      // Anyone can read public profiles
      allow read: if true;
      // Only the user themselves or an admin can update their profile
      allow update: if request.auth.uid == userId || isAdmin();
      
      // TRANSACTION, NOTIFICATIONS (private subcollections)
      match /{privateCollection}/{docId} {
          allow read, write, create, delete: if request.auth.uid == userId;
      }
    }
    
    // REVIEWS
    match /reviews/{reviewId} {
        allow read: if true;
        // Only the client who posted the review can create it.
        allow create: if request.auth.uid == request.resource.data.clientId;
    }

    // CONVERSATIONS
    match /conversations/{conversationId} {
        // Only participants of the conversation can read/write
        allow read, write: if request.auth.uid in resource.data.participants;
        
        match /messages/{messageId} {
            // Only participants can read messages
            allow read: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
            // A participant can only create a message if the conversation is not linked to a completed task
            allow create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
                           get(/databases/$(database)/documents/tasks/$(get(/databases/$(database)/documents/conversations/$(conversationId)).data.taskId)).data.status != 'completed';
        }
    }
    
    // PLATFORM_TRANSACTIONS (Admin only)
    match /platform_transactions/{transactionId} {
        allow read, write, create, delete: if isAdmin();
    }
  }
}
