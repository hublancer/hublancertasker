rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUpdatingOfferCountOnly(currentData, newData) {
      let otherFields = newData.keys().removeAll(['offerCount']);
      return otherFields.size() == 0 && newData.offerCount == currentData.offerCount + 1;
    }

    match /users/{userId} {
      allow read;
      allow write: if isOwner(userId);

      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
      match /transactions/{transactionId} {
        allow read, write: if isOwner(userId);
      }
    }

    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.postedById);

      // Task owner can update/delete if task is open or pending completion
      allow update, delete: if isAuthenticated() && isOwner(resource.data.postedById) && (resource.data.status == 'open' || resource.data.status == 'pending-completion' || resource.data.status == 'assigned');

      // Assigned tasker can update status to 'pending-completion'
      allow update: if isAuthenticated() 
                      && request.auth.uid == resource.data.assignedToId
                      && resource.data.status == 'assigned'
                      && request.resource.data.status == 'pending-completion'
                      && request.resource.data.keys().hasAll(['completionDetails'])
                      && request.resource.data.completionDetails.keys().hasAny(['location', 'timestamp']);
      
      match /offers/{offerId} {
        allow read;
        // Authenticated user can create an offer.
        allow create: if isAuthenticated();
        // Offer owner can update or delete their own offer.
        allow update, delete: if isAuthenticated() && isOwner(resource.data.taskerId);
      }

      match /questions/{questionId} {
        allow read;
        allow create: if isAuthenticated();
        // Task owner can update a question to add an answer
        allow update: if isAuthenticated() && isOwner(resource.data.postedById) && request.resource.data.keys().has('answer');
      }
    }
    
    match /reviews/{reviewId} {
        allow read;
        allow create: if isAuthenticated() && isOwner(request.resource.data.clientId);
    }

    match /conversations/{conversationId} {
        allow read, create: if isAuthenticated() && request.auth.uid in resource.data.participants;
        match /messages/{messageId} {
            allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
    }

    match /platform_transactions/{transactionId} {
      // Only allow backend/admin access
      allow read, write: if false; 
    }

    match /settings/platform {
        allow read;
        // Only allow backend/admin access to write
        allow write: if false;
    }
  }
}
