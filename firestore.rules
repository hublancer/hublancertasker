rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USERS
    match /users/{userId} {
      allow read;
      allow create;
      allow update: if request.auth.uid == userId || isAdmin();
      // Only admins can delete users
      allow delete: if isAdmin();
      
      // Transactions, Notifications subcollections
      match /{allChildren=**} {
        allow read, write: if request.auth.uid == userId || isAdmin();
      }
    }

    // SETTINGS
    match /settings/platform {
        allow read;
        allow write: if isAdmin();
    }

    // TASKS
    match /tasks/{taskId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.postedById;
      allow update: if request.auth.uid == resource.data.postedById || isAdmin();
      allow delete: if request.auth.uid == resource.data.postedById || isAdmin();
      
      // Offers, Questions subcollections
       match /{allChildren=**} {
        allow read, write: if request.auth.uid != null;
      }
    }
    
    // CONVERSATIONS
    match /conversations/{conversationId} {
        allow read, create: if request.auth.uid in resource.data.participants;
        allow update: if request.auth.uid in resource.data.participants;
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
    }
    
    // REVIEWS
    match /reviews/{reviewId} {
        allow read;
        allow create: if request.auth.uid != null;
    }
    
    // PLATFORM TRANSACTIONS (Admin only)
    match /platform_transactions/{transactionId} {
        allow read, write: if isAdmin();
    }
  }
}
