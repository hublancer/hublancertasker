
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user has the 'admin' role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can be read by anyone, but only the user themselves or an admin can write to their document.
    // Sensitive fields like wallet and role cannot be changed by the user.
    match /users/{userId} {
      allow read: if true;
      allow create: if true; // Anyone can create a user profile during signup.
      allow update: if isOwner(userId) && !("wallet" in request.resource.data) && !("role" in request.resource.data)
                       || (isAdmin() && "wallet" in request.resource.data); // Admins can update wallet
    }
    
    // Platform-wide settings are read-only for clients, only admins can change them.
    match /settings/platform {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Tasks can be read by anyone.
    // Only authenticated users can create tasks.
    // Tasks can only be updated by their owner (if open) or an admin.
    // Tasks can only be deleted by their owner or an admin.
    match /tasks/{taskId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.postedById == request.auth.uid || resource.data.assignedToId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && (resource.data.postedById == request.auth.uid || isAdmin());

      // Offers can be read by anyone.
      // Offers can be created by any authenticated user except the task owner.
      // Offers can only be deleted by the user who made the offer, or an admin.
      match /offers/{offerId} {
        allow read: if true;
        allow create: if isAuthenticated() && get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById != request.auth.uid;
        allow delete, update: if isAuthenticated() && (resource.data.taskerId == request.auth.uid || isAdmin());
      }
      
      // Questions can be read by anyone.
      // Questions can be created by any authenticated user.
      // Questions can be updated (to add an answer) by the task owner or an admin.
      match /questions/{questionId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && (get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById == request.auth.uid || isAdmin());
      }
    }
    
    // Conversations can only be read or written to by participants or an admin.
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated() && (request.auth.uid in resource.data.participants || isAdmin());
      
      match /messages/{messageId} {
         allow read, write: if isAuthenticated() && (request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants || isAdmin());
      }
    }

    // Reviews can be read by anyone.
    // Reviews can only be created by an authenticated user.
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated();
    }

    // User-specific collections like transactions and notifications are private.
    match /users/{userId}/{collection}/{docId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // Financial records (deposits, withdrawals, platform transactions) are admin-only.
    match /{collection}/{docId} {
        // This rule is broad. Let's refine it.
        // allow read, write: if isAdmin(); // This is too simple and might be what's causing issues.
        
        match /deposits/{depositId} {
           allow read, create, update: if isAuthenticated();
        }
        
        match /withdrawals/{withdrawalId} {
           allow read, create, update: if isAuthenticated();
        }
        
        match /platform_transactions/{transactionId} {
            allow read, create: if isAdmin();
        }

        match /paymentGateways/{gatewayId} {
            allow read: if true;
            allow write: if isAdmin();
        }
    }
  }
}
