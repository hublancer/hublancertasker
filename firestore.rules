rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // TASKS: Public read, but restricted writes.
    match /tasks/{taskId} {
      allow read;
      allow create: if isSignedIn();
      
      allow update: if isSignedIn() && (
        // Client cancelling their own open task
        (resource.data.postedById == request.auth.uid && request.resource.data.status == 'open' && resource.data.status == 'open') ||
        // Tasker marking task as done
        (resource.data.assignedToId == request.auth.uid && request.resource.data.status == 'pending-completion' && resource.data.status == 'assigned') ||
        // Client completing the task (most logic moves to Cloud Function)
        (resource.data.postedById == request.auth.uid && request.resource.data.status == 'completed' && (resource.data.status == 'assigned' || resource.data.status == 'pending-completion'))
      );
      
      allow delete: if isSignedIn() && resource.data.postedById == request.auth.uid;

      // OFFERS: Authenticated users can create. Only owner can delete.
      match /offers/{offerId} {
        allow read;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && isOwner(resource.data.taskerId);
      }

      // QUESTIONS: Authenticated users can create.
      match /questions/{questionId} {
        allow read;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isOwner(resource.data.postedById); // Allow client to add an answer
      }
    }

    // USERS: Can read public profiles, but can only write to your own profile.
    match /users/{userId} {
      allow read;
      allow create; // Allow user creation during sign-up
      allow update: if isOwner(userId);
      
      // TRANSACTIONS & NOTIFICATIONS: Only owner can access.
      match /transactions/{transactionId} {
        allow read, list: if isOwner(userId);
      }
      match /notifications/{notificationId} {
        allow read, list: if isOwner(userId);
        allow update: if isOwner(userId); // For marking as read
      }
    }
    
    // REVIEWS: Can be read by anyone. Only created by clients.
    match /reviews/{reviewId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
    }

    // CONVERSATIONS: Only participants can read/write.
    match /conversations/{conversationId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // SETTINGS: Admins can write, anyone can read.
    match /settings/{docId} {
      allow read;
      allow write: if isAdmin();
    }
    
    // PLATFORM TRANSACTIONS: Only accessible by admins
    match /platform_transactions/{transactionId} {
      allow read, list: if isAdmin();
    }
  }
}
