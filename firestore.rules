rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Settings
    match /settings/platform {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Users
    match /users/{userId} {
      allow read: if isAuth() || isAdmin();
      allow create: if isAuth();
      allow update: if isOwner(userId) || isAdmin();

      match /transactions/{transactionId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
      
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }

    // Tasks
    match /tasks/{taskId} {
      allow read: if true;
      allow create: if isAuth() && request.resource.data.postedById == request.auth.uid;
      // Allow owner to update, or any authenticated user to increment offerCount
      allow update: if (isAuth() && resource.data.postedById == request.auth.uid) ||
                    (isAuth() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['offerCount']));
      allow delete: if isAuth() && resource.data.postedById == request.auth.uid;

      match /offers/{offerId} {
        allow read: if true;
        allow create: if isAuth();
        allow update, delete: if isAuth() && resource.data.taskerId == request.auth.uid;
      }
      
      match /questions/{questionId} {
         allow read: if true;
         allow create: if isAuth();
         allow update: if isAuth() && get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById == request.auth.uid;
      }
    }
    
    // Conversations
    match /conversations/{conversationId} {
      allow read, update: if isAuth() && request.auth.uid in resource.data.participants;
      allow create: if isAuth(); // Allow any authenticated user to create a conversation
      
      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    // Reviews
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuth();
    }

    // Platform Transactions (Admin only)
    match /platform_transactions/{transactionId} {
        allow read, write: if isAdmin();
    }
  }
}
