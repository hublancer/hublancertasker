rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to get the task document from a request
    function getTask(taskId) {
      return get(/databases/$(database)/documents/tasks/$(taskId)).data;
    }

    // Settings can only be read and written by admins
    match /settings/{docId} {
      allow read, write: if isAdmin();
    }

    // Users can create their own profile.
    // They can only read/write their own profile, except for public fields.
    // Admins can read/write any profile.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Allow updates by the user themselves OR by an admin
      // OR a client completing a task for a tasker
      allow update: if (request.auth.uid == userId || isAdmin()) ||
                      (
                        // Rule for Client completing a task and paying a Tasker
                        exists(/databases/$(database)/documents/tasks/$(request.resource.data.completedTaskId)) &&
                        getTask(request.resource.data.completedTaskId).postedById == request.auth.uid &&
                        getTask(request.resource.data.completedTaskId).assignedToId == userId &&
                        getTask(request.resource.data.completedTaskId).status == 'pending-completion' &&
                        request.resource.data.wallet.balance == resource.data.wallet.balance + (getTask(request.resource.data.completedTaskId).price * (1 - get(/databases/$(database)/documents/settings/platform).data.commissionRate))
                      );

      // Transactions are private to each user
      match /transactions/{transactionId} {
        allow read, write: if request.auth.uid == userId;
        // Allow a client to create a transaction record for the tasker they are paying
        allow create: if isSignedIn() &&
                       exists(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)) &&
                       getTask(request.resource.data.taskId).postedById == request.auth.uid;
      }
      
      // Notifications are private
      match /notifications/{notificationId} {
          allow read, write: if request.auth.uid == userId;
      }
    }
    
    // Reviews can be read by anyone
    // Can only be created by the client who posted the corresponding task
    match /reviews/{reviewId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && getTask(request.resource.data.taskId).postedById == request.auth.uid;
    }

    // Tasks can be read by anyone, but only modified by the owner or under specific conditions.
    match /tasks/{taskId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();

      // Allow updates only by the owner, OR...
      allow update: if (request.auth.uid == resource.data.postedById && resource.data.status != 'completed') ||
                      // an assigned tasker marking the task as done
                      (request.auth.uid == resource.data.assignedToId &&
                       request.resource.data.status == 'pending-completion' &&
                       resource.data.status == 'assigned');
                       
      allow delete: if request.auth.uid == resource.data.postedById && resource.data.status == 'open';

      // Offers can be created by any authenticated user (except the task owner)
      // Offers can be deleted only by the user who created them.
      match /offers/{offerId} {
        allow create: if isSignedIn() && request.auth.uid != get(/databases/$(database)/documents/tasks/$(taskId)).data.postedById;
        allow delete, update: if isSignedIn() && request.auth.uid == resource.data.taskerId;
        allow read: if isSignedIn();
      }
      
      // Questions can be created by any authenticated user.
      // Answers can only be added by the task owner.
      match /questions/{questionId} {
          allow read: if isSignedIn();
          allow create: if isSignedIn();
          allow update: if request.auth.uid == resource.data.postedById; // for adding answers
      }
    }
    
    // Conversations can only be read/written by participants.
    match /conversations/{conversationId} {
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.participants;
        
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
    }

    // Platform-wide transaction records are write-only by the system (via secure transaction)
    // and read-only by admins.
    match /platform_transactions/{transactionId} {
      allow read: if isAdmin();
      allow create: if isSignedIn(); // Should be locked down further with functions
    }
  }
}
