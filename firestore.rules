rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admins can do anything
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // Rules for non-admin users
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId && !('wallet' in request.resource.data) && !('role' in request.resource.data);
    }

    match /tasks/{taskId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.postedById && resource.data.status == 'open';
      allow delete: if request.auth.uid == resource.data.postedById && resource.data.status == 'open';
    }
    
    match /tasks/{taskId}/{document=**} {
        allow read, write: if request.auth != null;
    }
    
    match /conversations/{conversationId} {
        allow read, update: if request.auth.uid in resource.data.participants;
        allow create: if request.auth.uid in request.resource.data.participants;
    }

    match /conversations/{conversationId}/{document=**} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
    
    match /paymentGateways/{gatewayId} {
        allow read: if request.auth != null;
    }

    match /settings/platform {
      allow read: if true;
    }
  }
}
