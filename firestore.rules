rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Can create their own profile, can only read/update their own data.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // Tasks: Anyone can read. Logged-in users can create. Only owner can update.
    match /tasks/{taskId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Only the poster can update the task.
      allow update: if request.auth != null && request.auth.uid == resource.data.postedById;
      allow delete: if false; // Deleting tasks is disallowed for now.

      // Offers: Logged-in users can create. All can read.
      match /offers/{offerId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if false;
      }

      // Questions: Logged-in users can create. All can read.
      match /questions/{questionId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if false;
      }
    }
    
    // Conversations & Messages:
    match /conversations/{conversationId} {
      // Allow read/get access to the conversation doc if the user is a participant
      allow get, list: if request.auth != null && request.auth.uid in resource.data.participants;
      // Allow creation of a conversation
      allow create: if request.auth != null;

      // Messages sub-collection
      match /messages/{messageId} {
        // Allow read/write access to messages if the user is a participant of the parent conversation
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
  }
}
