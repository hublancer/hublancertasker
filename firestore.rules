rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId, resourceData) {
      return userId == resourceData.postedById;
    }
    
    function isTasker(userId, resourceData) {
        return userId == resourceData.taskerId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Only allow updating offerCount
    function isUpdatingOfferCount(requestData, resourceData) {
      return requestData.keys().hasOnly(['offerCount']) && requestData.offerCount == resourceData.offerCount + 1;
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isAdmin();
      
      match /transactions/{transactionId} {
        allow read, create: if request.auth.uid == userId || isAdmin();
      }
      
      match /notifications/{notificationId} {
        allow read, create, update: if request.auth.uid == userId || isAdmin();
      }
    }

    match /tasks/{taskId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.auth.uid, request.resource.data);
      allow update: if (isSignedIn() && isOwner(request.auth.uid, resource.data)) || (isSignedIn() && isUpdatingOfferCount(request.resource.data, resource.data));
      allow delete: if isSignedIn() && isOwner(request.auth.uid, resource.data);

      match /offers/{offerId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && isTasker(request.auth.uid, resource.data);
      }
      
      match /questions/{questionId} {
        allow read, create: if isSignedIn();
        allow update: if isSignedIn() && isOwner(request.auth.uid, get(/databases/$(database)/documents/tasks/$(taskId)).data);
      }
    }
    
    match /conversations/{conversationId} {
      allow read, create: if isSignedIn() && request.auth.uid in resource.data.participants;
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    match /reviews/{reviewId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
    }
    
    match /settings/platform {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /platform_transactions/{transactionId} {
      allow read, create: if isAdmin();
    }
  }
}